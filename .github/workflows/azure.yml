# File: .github/workflows/azure.yml
# tags: [ 'v*.*.*' ]

name: SampleWorkflowUsingAzure

on: 
  push:
    branches:
      - main
      - dev
    tags:
      - 'v*'
  pull_request:
    branches:
      - main      
  workflow_dispatch:
    
permissions:
      id-token: write
      contents: read
      
env:
  # Configures the registry. By default, docker.io is used when no registry is specified.
  REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.10"
  NODEJS_VERSION: "16"
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: DEVELOPMENT    
    
#    services:
#      db_service:
#        image: postgres
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_DB: postgres
#          POSTGRES_PASSWORD: postgres
#        # Set health checks to wait until postgres has started
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#        ports:
#          # Maps tcp port 5432 on service container to the host
#          - 5432:5432    
    
    steps:
      - name: 'Checkout Github repo'
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64
          
      - name: Install core dependancies
        run: |
          python -m pip install --upgrade pipenv wheel flake8 pytest
          
      - name: Cache pipenv
        id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies and write VENV environment variable for correct virtual env path
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --deploy --dev
          echo "VENV=$(pipenv --venv)" >> "$GITHUB_ENV"
          
#      - name: Run test suite
#        run: |
#          pipenv run test -svvv
#        env:
#          TEST_DB_HOST: localhost
#          TEST_DB_NAME: postgres
#          TEST_DB_PASS: postgres
#          TEST_DB_PORT: 5432
#          TEST_DB_USER: postgres

      - name: Run flake8
        uses: suo/flake8-github-action@releases/v1
        with:
          checkName: 'build-and-deploy'   # NOTE: this needs to be the same as the job name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                    
      - name: Run static type checking (pyright)
        uses: jakebailey/pyright-action@v1
        with:
          venvpath: ${{ env.VENV }}

      - name: Test with pytest
        run: |
          pytest
          
      - name: 'Login via Az module'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Get Azure KeyVault secrets'   
        uses: Azure/get-keyvault-secrets@v1
        with: 
          keyvault: ${{ secrets.AZURE_KEYVAULT }}
          secrets: 'AZURE-CONTAINER-REPO-Username, AZURE-CONTAINER-REPO-Password'
        id: azkv_GetSecrets
        
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}          

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v2
        
      - name: 'Connect to docker'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ steps.azkv_GetSecrets.outputs.AZURE-CONTAINER-REPO-Username }}
          password: ${{ steps.azkv_GetSecrets.outputs.AZURE-CONTAINER-REPO-Password }}      
          
      - name: 'Build and push docker container to registry'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }} 
          labels: ${{ steps.meta.outputs.labels }}          
